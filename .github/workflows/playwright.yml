name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
        # run tests in 4 shards
        browser: [chromium, firefox, webkit]

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Create environment file
      run: |
        cp .env.example .env
        echo "BASE_URL=${{ secrets.BASE_URL || 'https://www.saucedemo.com/' }}" >> .env
        echo "SAUCE_USERNAME=${{ secrets.SAUCE_USERNAME || 'standard_user' }}" >> .env
        echo "SAUCE_PASSWORD=${{ secrets.SAUCE_PASSWORD || 'secret_sauce' }}" >> .env
        echo "SAUCE_LOCKED_USERNAME=${{ secrets.SAUCE_LOCKED_USERNAME || 'locked_out_user' }}" >> .env
        echo "SAUCE_PROBLEM_USERNAME=${{ secrets.SAUCE_PROBLEM_USERNAME || 'problem_user' }}" >> .env
        echo "SAUCE_PERFORMANCE_USERNAME=${{ secrets.SAUCE_PERFORMANCE_USERNAME || 'performance_glitch_user' }}" >> .env
        echo "HEADLESS=true" >> .env
        echo "NODE_ENV=ci" >> .env
    
    - name: Run Playwright tests
      run: npx playwright test --shard=${{ matrix.shardIndex }}/${{ matrix.shardTotal }} --project=${{ matrix.browser }}
      env:
        CI: true
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-${{ matrix.browser }}-${{ matrix.shardIndex }}
        path: |
          reports/current/
          test-results/
        retention-days: 30
    
    - name: Upload screenshots
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-screenshots-${{ matrix.browser }}-${{ matrix.shardIndex }}
        path: reports/current/test-results/
        retention-days: 30

  report:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        path: all-results/
    
    - name: Merge test results
      run: |
        mkdir -p reports/current
        find all-results -name "*.json" -exec cp {} reports/current/ \;
        find all-results -name "*.xml" -exec cp {} reports/current/ \;
        find all-results -name "html-report" -exec cp -r {} reports/current/ \;
    
    - name: Generate HTML report
      run: npx playwright show-report reports/current/html-report --host 0.0.0.0 --port 9323 &
    
    - name: Upload merged test results
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report-merged
        path: reports/current/
        retention-days: 30
    
    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🧪 Playwright Test Results\n\n';
          
          // Read test results
          const resultsPath = 'reports/current/results.json';
          if (fs.existsSync(resultsPath)) {
            const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
            const stats = results.stats || {};
            
            comment += `### 📊 Test Summary\n`;
            comment += `- **Total Tests**: ${stats.total || 0}\n`;
            comment += `- **Passed**: ${stats.passed || 0}\n`;
            comment += `- **Failed**: ${stats.failed || 0}\n`;
            comment += `- **Skipped**: ${stats.skipped || 0}\n`;
            comment += `- **Duration**: ${Math.round((stats.duration || 0) / 1000)}s\n\n`;
            
            if (stats.failed > 0) {
              comment += `❌ **${stats.failed} test(s) failed**\n\n`;
            } else {
              comment += `✅ **All tests passed!**\n\n`;
            }
          }
          
          comment += `📋 [View detailed report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 